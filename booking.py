from customer import Customer
from reservation import Reservation
from database import Database
from cart import Cart
from utils import log_reservation, print_divider
from data import transports, hotels
from validation import validate_phone, validate_email
from payment import process_payment
from reservation import clear_reservations

class TravelBookingSystem:
    def __init__(self):
        self.database = Database()
        self.cart = Cart()
        self.hotels = hotels
        self.last_customer = None 

    def start(self):
        print_divider("üèñÔ∏è –°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø–æ–¥–æ—Ä–æ–∂–µ–π üèñÔ∏è")
        while True:
            print("1. –ë—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫")
            print("2. –ó–∞–º–æ–≤–∏—Ç–∏ –≥–æ—Ç–µ–ª—å")
            print("3. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫")
            print("4. –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
            print("5. –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è")
            print("6. –í–∏–π—Ç–∏")

            choice = input("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ")
            try:
                if choice == '1':
                    self.book_ticket()
                elif choice == '2':
                    self.book_hotel()
                elif choice == '3':
                    self.view_cart()
                elif choice == '4':
                    self.checkout()
                elif choice == '5':
                    clear_reservations()
                elif choice == '6':
                    print("–í–∏—Ö—ñ–¥...")
                    break
                else:
                    raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä.")
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    def book_ticket(self):
        customer = self.get_customer_data()
        print("\n–î–æ—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:")
        for idx in range(len(transports)):
            transport, price = transports[idx]
            print(f"{idx + 1}. {transport} - {price} –≥—Ä–Ω")

        try:
            transport_choice = int(input("–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–Ω–æ–º–µ—Ä): ")) - 1
            if transport_choice < 0 or transport_choice >= len(transports):
                raise IndexError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É.")
            transport, price = transports[transport_choice]
            reservation = Reservation(customer, transport, price)
            self.cart.add_to_cart(reservation)

            # –ó–∞–ø–∏—Å –≤ —Ñ–∞–π–ª
            log_reservation(reservation)

            print(f"\n‚úÖ {customer.name}, –≤–∏ –¥–æ–¥–∞–ª–∏ –∫–≤–∏—Ç–æ–∫ –Ω–∞ {transport} –¥–æ –∫–æ—à–∏–∫–∞.")
        except ValueError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        except IndexError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    def book_hotel(self):
        customer = self.get_customer_data()
        print("\n–î–æ—Å—Ç—É–ø–Ω—ñ –≥–æ—Ç–µ–ª—ñ:")
        for i in range(len(self.hotels)):
            hotel, price = self.hotels[i]
            print(f"{i + 1}. {hotel} - {price} –≥—Ä–Ω –∑–∞ –Ω—ñ—á")
        try:
            hotel_choice = int(input("–û–±–µ—Ä—ñ—Ç—å –≥–æ—Ç–µ–ª—å (–Ω–æ–º–µ—Ä): ")) - 1
            if hotel_choice < 0 or hotel_choice >= len(self.hotels):
                raise IndexError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –≥–æ—Ç–µ–ª—é.")
            hotel, price = self.hotels[hotel_choice]
            reservation = Reservation(customer, hotel, price)
            self.cart.add_to_cart(reservation)

            # –ó–∞–ø–∏—Å –≤ —Ñ–∞–π–ª
            log_reservation(reservation)

            print(f"\n‚úÖ {customer.name}, –≤–∏ –∑–∞–º–æ–≤–∏–ª–∏ –≥–æ—Ç–µ–ª—å {hotel}.")
        except (ValueError, IndexError) as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    def get_customer_data(self):
        while True:
            if self.last_customer:
                use_last = input("–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞? (—Ç–∞–∫/–Ω—ñ): ").strip().lower()
                if use_last == "—Ç–∞–∫":
                    return self.last_customer
                elif use_last == "–Ω—ñ":
                    break
                else:
                    print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    continue
            
            name = input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è: ").strip().capitalize()
            phone = validate_phone(self.cart)
            email = validate_email(self.cart)
            customer = Customer(name, phone, email)
            self.last_customer = customer
            return customer

    def view_cart(self):
        reservations = self.cart.view_cart()
        if not reservations:
            print("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        else:
            print("\n–í–∞—à –∫–æ—à–∏–∫:")
            for reservation in reservations:
                print(f"- {reservation.transport_or_hotel} - {reservation.price} –≥—Ä–Ω")

    def checkout(self):
        reservations = self.cart.view_cart()
        if not reservations:
            print("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —â–æ—Å—å —É –∫–æ—à–∏–∫ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º.")
            return
        print("\n–í–∞—à –∫–æ—à–∏–∫:")
        for idx, reservation in enumerate(reservations):
            print(f"{idx}. {reservation.transport_or_hotel} - {reservation.price} –≥—Ä–Ω")

        while True:
            confirm = input("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? (—Ç–∞–∫/–Ω—ñ): ").strip().lower()
            if confirm == "—Ç–∞–∫":
                process_payment(self.cart, self.database)
                break
            elif confirm == "–Ω—ñ":
                print("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                return
            else:
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

system = TravelBookingSystem()
system.start()
